Network Working Group                                       J.J. Brucker
Request for Comments:                                      Open-UDC Team 


          ==== Open-UDC Network Implementation ====

 === Status of This Memo ===

 (Today 28 jan 2011, it is still a draft).

 === Abstract ===

 === Copyright Notice ===

 === Table of Contents ===

 1. Introduction ....................................................
 2. Conventions Used in This Document ...............................
 3. Terminology .....................................................
 4. Global Description
 5. Node Description ................................................
    5.1. Node URI (Uniform Ressource Identifier) ....................
    5.2. Node Name Restriction ......................................
    5.3. Node types .................................................
         5.3.1 Accountants ..........................................
         5.3.2 Users ................................................
         5.3.1 Fund .................................................
         5.3.1 Init .................................................
    5.4  Node Aliases ...............................................
    5.5. Node parameters ............................................
         5.5.1 Taxe rate ............................................
         5.5.2 Taxe redistribution ..................................
         5.5.3 Redirections .........................................
         5.5.4 Vote parameters ......................................
         5.5.5 Suscribtion parameters ...............................
         5.5.6 Member List ..........................................
         5.5.7 Accountants List .....................................
         5.5.8 Individuals List .....................................
 6. Voting procedure ................................................
 7. Broadcast channels ..............................................
    7.1. IRC and XMPP Use ...........................................
    7.2. Mailing List Use ...........................................
 8. Commands Summary ................................................
    8.1 Global Commands .............................................
    8.2 Node Commands ...............................................
 9. Commands Description ............................................
10. Individual certification ........................................
11. Recommended tools for udc-agents ................................
    11.1 Direct File Transfer .......................................
    11.2 GlusterFS ..................................................
    11.3 CouchDB ....................................................


1.== Introduction ==

2.== Conventions Used in This Document ==

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in [RFC2119].

3.== Terminology ==

  An "udc-client" is anything that follow the Open-UDC money description
  ([RFCxxxx]) to check validity of money units and manipulate them.

  An "udc-agent" is a valid udc-client wich follow this specification
  ([RFCxxxx]) to communicate with other udc-agent.

  An "udc-unit" are units of money as described in the Open-UDC money
  description ([RFCxxxx]).

  A node refer to an entity composed with 1 to multiple udc-agent, which
  has been accepted somewhere in a hierarchized nodes structure.

  An udc-agent have to be accepted in at least one node to began
  receiving and sending money.

  Once a udc-agent have been accepted as a member of a node, it could
  become himself, or with some other members of the node, a children
  node.

  That is why we sometime use the term "node", to designate an
  udc-agent as soon as it has been accepted as a member of a node.

  The "root node" could be also called the "main node", or the
  "top-level node", but we prefer the "root node" designation.

  A individual is a living human, regardless it's age, sex, et cetera.

4.== Global description ==

  In a open-UDC architecture, the root node is itself an entity of
  multiple nodes whith multiple individuals behind, and anyone SHOULD be
  able to see what happen in this node.

  A node MAY be associated with one or more individuals. But an
  individual MUST be associated with only one node in the entire node
  structure.

  A node SHOULD publish at least one money public key, to facilitate
  transaction to its fund.

  By definition an udc-agent which has been accepted in a node is a
  member of 2 filiated nodes : this node and itself.

  But the udc-agent MAY be a member of any other node, and SHOULD watch
  almost all node upon him in the hierarchized nodes structure.

5.== Node Description ==

5.1= Nodes URI  (Uniform Ressource Identifier) =

  Each Node have a unique identifier which look like DNS name :
    - uni         is the root node of the currency "uni"
    - uni.oy      could be the node used by almost all Faroe Islands 
                  habitants.
    - uni.bel.bru could be the node mainly used by people living in
                  Bruxelle (Belgium).
    - uni.48_22   could be the node used mainly by people around the
                  geographic coordinate N 48° E 22°

5.2= Node Name Restriction =
 
  Node name are case insensitive and MUST use ASCII charset [0-9a-z_-].

  Node names SHOULD be limited to 8 characters.

  Some node name are RESERVED for specific use.
    - "fund"  is reserved for the default children node. It can NOT have
              any children, but could be use to collect taxes (if any).
    - "init" is reserved for responding to the RESET and MARK commands.
              It can NOT have any children, NEITHER store any money.

  Alias children name MAY be allowed by a Node.

  Node MUST forbid any children to have the same name as him.
  e.g: Node URI like uni.oy.oy can NOT exist.

5.3= Node Type =

 * Accountants are the ones which verify and store all transactions in 
   the node. Each accountants are coequal, and 
   - MUST store the entire monney repartition of the node.
   - MUST store all node parameters.
   - MUST be present whith high availabilty on all communication
          channels of the node.
   - MUST be able to verify and validate (eg. sign) quickly any
          transacations in the node.
   - A minimal number or proportion of accountants MUST validate (sign)
     each transaction. That is a parameters which should be voted by the
     members of a node.

 * Users are typically the type used by almost everyone to declare or
   confirm transactions, and to vote for the different parameters of the
   node.

  Any node user can ask to be an accountant if it match accountant
  requirements, its acceptance SHOULD depend on a node vote.

  Accountants and Users are the members of a node. As validate member of
  a node, they are able to create their own children node, but it is not
  recommended if they don't match the accountant requirements AND don't
  have replicants.

 * Fund

  This specific node (...)

 * Init

  This specific node is OPTIONAL (...)

  == Node Aliases ==

   The "\" charaters MUST be used only to identify several accountant of
  a children node. For exemple names fra\Paris and fra\05 on a channel
  indicate that node "Paris" and "05" are both accountant of the
  children node fra.

  == Node parameters ==


6.== Broadcast Channel ==

  Each Node MUST have at least one way to broadcast all transactions in
  this node.

  This MAY be a dedicated IRC channel or an XMMP salon (MUC) or a
  mailing list. Or all of them.

6.1= IRC and XMPP use =

  It is RECOMMENDED for a node to have at least one XMPP salon, AND to
  send daily digest to a mailing list.

  A node SHOULD use only one way to broadcast transactions during a
  period, they other ways exist for backup only (if first ways broke).

  The backup IRC channels and XMPP salons MUST indicate the one which
  is active and used to broadcast transactions. That could be done using
  the topic of the channels or salons.

  Name of the IRC channel or XMPP salon SHOULD be equal to its node URI,
  prefixed with "udc." to indicate it follow this specification.

  Example: the root node of the test and developpement currency named
  "dev" use the channel ##udc.dev on freenode irc network.

IRC channel or XMMP salons SHOULD be moderated and structured like this :
 - Accountants  - which have the operator or moderator status.
 - Users        - which are able to send command in the broadcast channel.
 - Visitors     - which are just able to listen the broadcast channel.


 == Commands ==

  An udc-agent MUST respond to all the following commands : 

 .1= General Command =

  General Commands are  usable outside the broadcast channels, as so by
  anyone to any udc-agent :

 - HELP
    This command MUST show and explain other command supported by the
    udc-agent.
 - INFO
    This command SHOULD indicate the version of the open-udc software, 
    the nodes in wich it has been accepted, and its public keys or certificats.
 - SUSCRIBE
    This command SHOULD permit to a member of a node for entering one of its node.
 - WHEREIS
    The udc-agent MUST answer EVERYTHING he know about the unit(s) of
    money given as parameter(s).
 - DUMP
    This command SHOULD dump all the money database of a member of a node.
 - GETPARAMETER

 - SEND
      This Command permit to send money It implies the use of the DECLARE command.

_Node Command, usable inside the broadcast channels.

 - ASKVOTE
      This Command is send by any individual who wants to change a node
      parameter, introduce a new member in the node, or wants its
      udc-agent to hold the accountant status.
 - VOTE
      This Command respond to an ASKVOTE command.
 - UPDATE
      This Command is sent by accountants which have been disconnected
      to incicate it have finish to retrieve the transactions it losts,
      and so is able to regain its accountant status.
 - DECLARE
      This Command is send by a node to declare a transaction. (money
      have been sent directly from somewhere to somewhere else)
 - CONFIRM
      This Command respond to a DECLARE command

 - EXCHANGE
      This Command is used to exchange money units (a unit with big
      value to mutiple money units with less value).

 - RESET

 - MERGE
 - SPLIT


 == Commands description ==

 - HELP (mandatory)

  Without any argument it MUST list the available command accepted by a
  bot. In other case it must the describe the command passed as its
  first argument.

  Eg, To show help about suscribing :
  /msg ubot help suscribe




 === Notes ===

  Maximum lenght of channel name and nickname are shortly limited on irc
  networks (48 chars max for channels and 16 chars max for nicknames on
  freenode).
  That is why node names SHOULD be limited to 8 characters.


