Network Working Group                                       J.J. Brucker
Request for Comments:                                      Open-UDC Team


 ==== Open-UDC Money Description ====

 === Abstract ===

 === Status of This Memo ===

 (Today 10 may 2011, it is a draft requesting for comment).

 === Copyright Notice ===

 === Table of Contents ===

 1. Introduction ....................................................
 2. Conventions Used in This Document ...............................
 3. udc-unit overview ...............................................
    3.1 header/footer ...............................................
    3.2 bills .......................................................
    3.3 signing chain ...............................................
    3.3.1 make transaction ......................................
    3.3.2 differences compared to BitCoin .......................
    3.3.3 offline transactions ..................................
    3.3.4 beginning the chain ...................................
    3.3.5 timestamp in the chain ................................
    3.3.6 cancel a transaction ..................................
 4. udc-unit header description .....................................
    4.1 currency code ...............................................
    4.2 version .....................................................
    4.3 number of udc-bills ........................................
 5. udc-bill description ............................................
    5.1 serial number ...............................................
    5.2 coding the value ............................................
    5.3 creation information .....................................
 6. udc-unit signing chain description ..............................
    6.1 Signature types .............................................
    6.1.1 Digests ...............................................
    6.1.2 Asymmetric cryptographic keys .........................
 7. udc-unit binary format ..........................................
    7.1 header ......................................................
    7.2 bills .......................................................
    7.3 signing chain ...............................................
 8. udc-unit ASCII format ............................................
 9. Security concerns ...............................................
    9.1 offline transactions ........................................
    9.2 init chain signature ........................................

1.== Introduction ==

  The Open-UDC project aims to provide a open, democratic and secure
  monetary system, compatible with the universal dividend.

  This document describe the set of information which can be exchanged
  for goods and services.

  We define as "udc-unit" this set of information.

  We define as "udc-bill" the indivisible parts inside an udc-unit
  which represents an indivisible value.

  We define as "udc-client" any application which manipulate udc-units
  according exactly to this specification ([RFCxxxx]).

  "udid" and "udnode" are defined in the draft named "Open-UDC
   Authentication Mechanisms" ([RFCxxxx]).

  Udc-unit uses signing chains which are an extension of the OpenPGP
  standard described in the [RFC4880] "OpenPGP Message Format".

2.== Conventions Used in This Document ==

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in [RFC2119].

3.== udc-unit overview ==

3.1= header and footer =

  The header and footer define:
    - the currency.
    - the version of the udc-unit.
    - how many udc-bills the udc-unit contain.

  They frame the udc-bills.

3.2= udc-bills =

  An udc-bill is a few single and undivisible data which indicate a value.

  Udc-bills are data without any mechanism of authenticity and should
  not be directly exchange. "copying is not theft".

  Udc-bills contain:
    - A number to define the value
    - A serial number.
    - Information about its created set.

  An udc-unit may contain up to 2^16-1 udc-bills.

3.3= signing chain =

  Like in the BitCoin system: an udc-unit contain a chain of digital
  signatures. And that is the main mechanism of udc-unit authenticity.
  The second one being provided by the network.

3.3.1 make transaction

    To make a transaction, ie. to pay or make a donation, people first
    need to own some udc-unit. Which means you hold the secret (the
    private key) associated to the last pubkey in the signature chain.

    Then transaction is done by :
    1- Digitally signing (with the private key associated to previous
       public key) the digest of this udc-unit concatenated with some
       meta-data containing the public key of the next owner.
    2- Adding this signature to the beginning of the udc-unit.

    A payee should verify the signatures to verify the chain of
    ownership.

3.3.2 differences compared to BitCoin

    As the bitcoin designer said: the problem of course is how the payee
    can verify that one of the previous owners did not double-spend the
    udc-unit ?

    And that the point where we diverge from bitcoin.

    Bitcoins want to avoid any third party to checks for transactions,
    and the solution they found to avoid third party involve more bad
    things that it prevents: the race for CPUs, fee for the benefit of
    the most powerful, slowness of transactions which increase with the
    number of pairs...

    You may notice that, as you have to be connected to make a BitCoin
    transaction, there is actually a third party for BitCoins : it is
    the entire network.

    We believe that the most important concepts to provide equity is not
    the hierarchized (or not) structure of the third party. But its
    level of, human-based, democracy and transparency.

    That kind of democracy and transparency have been especially met
    in some broadcast channels like newsgroups, irc channels, or XMPP
    Multi User Chatroom.

    So we choose to use XMPP chatroom as a first third party to check
    transactions. And we allow and encourage any group of people to make
    their own sub-chatroom as the number of members or transactions
    inside the first chatroom increase.

    Growing up, the third party should be split into a tree of node.

    Notes:

    * Recommended node architecture, mechanisms and tools are
    described in the draft named "Open-UDC Network Implementation"
    ([RFCxxxx]).

    * First implementation of an Open-UDC system MAY start with a
      third-party with only one entity to check transactions. Which is
      a GREAT DANGER for transparency and democracy.

3.3.3 offline transactions

    The double-spending problem is solved by declaring each transaction
    to the node tree (the third-party authority). That is what we
    call the connected mode.

    But connected mode is not always possible in the real world:
    How can a camel be bought in the desert without an Internet
    connection ?

    By verifying the identity of each part of the transaction :

      As in connected transaction, the vendor show first an OpenPGP
      certificate which contain at least its udid or one udnode
      and one of its signing chain public key.

      But before to sign the KeyID of the vendor on the udc-unit, the
      buyer SHOULD verify that the vendor is validated by its OpenPGP
      web of trust, and vice-versa. So vendor and buyer SHOULD exchange
      missing certificates to reach one of their common denominator
      which are, ultimately, the accountants of the root node.

    As KeyID collision may occurs, the udc-unit need, to be check and
    replayed by the network, to contain the "udid1" or a "udnode1" of
    the buyer in the signing chain.

    So the vendor MUST use the Open-UDC ID subpacket in the signed
    part of its signature or add it in the non-signed part of the previous
    signature (cf section 5.2.3.1. of the [RFC4880]).

    Offline udc-units SHOULD be connected regularly to:
    - possibly be shortened.
    - be replayed and pay taxes if there are some in the crossed nodes.
    - check it has not been double spent and identify the bad guy if
      has been.

    The offline parameters (maximum time since a connected transaction,
    maximum following offline transactions, multiple recipient...)
    SHOULD be the same for all udc-units of a given currency, and MAY be
    democratically calculated.

    By the way, an offline vendor is free to decide its parameters to
    suspect or accept the money given to him. But if they differ from
    the ones recommended by the community, the vendor SHOULD prevent
    the buyer of its parameters before the transaction (eg: like
    some vendors prevented that they didn't accept check).

    Note about OpenPGP KeyID collision : 2^64 possible OpenPGP KeyID,
    today there are about 2^33 human which may use about 2^6 key in
    there life.

3.3.4 beginning the chain

    Each time money is created, a list of key IDs and a list of users
    who belong those keys is published. Those lists should be sign by at
    least the majority of the user in the previous list.

    Then each user should create the part of money which is reserved for
    him, i.e. signing first transaction with its own key.

    Key ID collision are not allowed for this keys.

3.3.5 timestamp in the chain

    Recording the transaction dates inside the chain has 2 purposes :

      - to make statistics and help investigate on fraud.

      - to limit the use of udc-units by speculation computers.

    Indeed: the date of transaction are formatted as the number of
    seconds since 00:00:00 UTC on Thursday, 1 January 1970. And a
    date of transaction MUST be always strictly greater than the
    previous transaction date.

    If there is a doubt on the date (should occurs only for disconnected
    transactions) implementations SHOULD sign a date equal of the
    previous date increased by 1.

    If a buyer has signed a date too far in the future, as a vendor
    you can :
    - give his money back more far in the future (... and ping
      pong until offline transaction maximum number is reached
      ...  =>  bad idea).
    - ask him to come back getting the things he has paid after
      the date he has signed (best idea).
    - Ask for money unit re-initialization (not to abuse).

3.3.6 cancel a transaction

    A transaction can not be canceled.

    A transaction is valid or is not.

    If the transaction data in the signature chain are incorrect, the
    transaction is invalid and :
    - the udc-unit MUST be rejected.
    - the udc-client that make an error MUST be notified that its
      transaction is invalid and has been rejected.
    - the udc-unit still belongs to the owner of the last valid
      transaction.

    If the transaction is valid but, as a recipient, you don't want the
    money (to own the udc-unit(s)), you have to make a new transaction
    back, i.e. to sign the key before your in the udc-unit.


4.== udc-unit header description ==

4.1= currency code =

    The currency code should be conformed to the ISO 4217 Currency Code
    List.

    There are still a lot of place in this list to create new
    3-characters currency codes.

    By the way, the currency code in udc-unit (version 1) MAY have a
    length up to 5 characters.

4.2= version =

    Adding a version information inside udc-units give them the ability
    to evolve in the future.

    This RFC describe only the version 1 of udc-units.

4.3= number of udc-bills =

    The header specifies the number of udc-bills the udc-unit may
    contain. The value of an udc-unit is the calculated sum of the
    udc-bills it contains.

5.== udc-bill description ==

5.1= serial number =

    The serial number of a udc-bill is composed of 3 information :

    - Its value, which follow the convention mainly adopted
      worldwide: 1,2,5,10,20,50,100,200,500,1000 ...

    - A counter which increases each time a set of money is created.
      (monthly creation is recommended).

    - Its number in the set of its value (of the period).

    These 3 data are used to create unique information to identify one
    udc-unit of a given currency.

5.2= coding the value =

    As the value of a udc unit follow the 1,2,5,10,20... sequence, it
    may be coded up to the value 5*10^63 with only one octet and to the
    value 5*10^15 with only 6 bits :

    +  -  -  -  -  -  -  -  +
    |  x10 Multiplier | ind +
    +  -  -  -  -  -  -  -  +

    Inside udc-bill we only use 6 bits :
    .The first 4 bits are used to define the multiplier, so up to 10^15.
    .The last 2 bits define the value of the base :
                01 -> 1
                10 -> 2
                11 -> 5

    Examples:
    * an udc-bill of value 5 which is equal to 5 * 10^0 is binary
      encoded to 00 0011.
    * an udc-bill of value 100 which is equal to 1 * 10^2 is binary
      encoded to 00 1001.

5.3= creation information =

    Open-UDC promotes a monthly Universal Dividend. That means new
    udc-bills are created (each month) for each living human (also
    called individual) which adopts the money.

    Creation information permits to know more about the udc-bill :
    it spreads the quantity and distribution about monetary creation and
    so permit to detect the legitimacy of each udc-bills.

    The creation information inside udc-bill are :
    1- The number of individuals recorded for the created set.
    2- The Universal Dividend and its distribution among the
       possible udc-bill values for the created set.

    Example:
    If for a given month, there is 250 individuals and the Universal
    Dividend has been calculated to be 10052. The new udc-bills
    may look like :
        250 x 2 udc-units of value 5000
        250 x 5 udc-units of value   10
        250 x 2 udc-units of value    1
    And so udc-units of value 10 will be numbered from 0 to 1249 this month.

    This information about each created set MUST be know by at least
    all udc-unit initializers.

6.== udc-unit signing chain ==

  The signing chain is almost compatible with the section 5.2.3. of the
  [RFC4880] but use some specific Open-UDC enhancements.

7.== udc-unit binary format ==

  Following presents the binary construction of a udc-unit for which the
  version is equal to 1.

  This is also the recommended binary format to use through the network
  or in storage systems (files, databases, ...).

  All integer values stored in more that 1 octet MUST use the little
  Indians.

  All dates are formatted as number of seconds since 00:00:00 UTC on
  Thursday, 1 January 1970.

  That means the limit date is at year 2106 with a 32-bit integer.
  However be aware that on almost all 32 bits POSIX system, the time is
  signed and so is limited to 19 January 2038.

7.1= header and footer =

   0     7 8    15 16   23 24    31 32                            63
  +-------+-------+-------+--------+--------+-------+-------+-------+
  |            currency code                |Ver|P| |   Nb Glued    |
  +-------+-------+-------+--------+--------+-------+-------+-------+

    Detail:

    bits 0 to 39 (currency code):
    3 to 5 NULL-padded ASCII chars to identify a currency
    (cf. section 3.1).

    bits 40 to 43 (Version):
    Version bits. This document only describe version 1.

    bits 44 (Position):
    This bit define the location of udc-bills:
        - if 0 the udc-bills are following
        - if 1 the udc-bills are previous
    This may be useful to indicate the Number of udc-bill in both
    extremities in order to read them forward or backward.

    bits 45 to 47 (Unused):
    Reserved for future use.

    bits 48 to 63 (NbGlued):
    uint16_t. Define the number of udc-bill "glued" and signed once.


7.2= udc-bill =

   0     7 8    15 16   23 24    31 32                            63
  +-------+-------+-------+--------+--------+-------+-------+-------+
  |Value| Time Counter|    bill number of this value for the period |
  +-------+-------+-------+--------+--------+-------+-------+-------+
  | Factors of the Universal Dividend  (eg: ...+h*10+p*5+q*2+n*1 )..
  +-------+-------+-------+--------+--------+-------+-------+-------+
  ...they are 16*3 possible bills, factors are encoded on quartets...
  +-------+-------+-------+--------+--------+-------+-------+-------+
        ... (so 16*3*4 = 192 bits)           ...; h ; p ; q ; n |
  +-------+-------+-------+--------+--------+-------+-------+-------+
  | Magic |         Number of Individuals           |  CRC 16 (BSD) |
  +-------+-------+-------+--------+--------+-------+-------+-------+

    Only the first 8 octets (64 bits) are useful to identify a unique
    udc-bill.

    Detail:

    bits 0 to 5 (Value):
    Value of the udc-unit. (cf. section 5.2).

    bits 6 to 19 (Time counter):
    14 bits, unsigned. MUST be increase each time a set of money is
     created (usually each month).

    bits 20 to 63 (number):
    44 bits, unsigned. The bill number of this value in the created
    set.

    bits 64 to 255 (Universal Dividend):
    The amount of each udc-bill created per individual for the
    given period:
      bits 64 to 67 : the amount of udc-bill of value 5*10^15 created in
                      this set
      (...)
      bits 252 to 255 : the amount of udc-bill with value 1*10^0 created in
                        this set

    bits 256 to 263 (Magic):
    This octet may be use as a magic number. Why not 42 ?

    bits 264 to 303 (Individual Number):
    40 bits, unsigned. The number of registered unique individual for
    the given period.

    bits 304 to 319 : BSD compatible CRC of the 304 previous bits.

7.3= signing chain =


  The signing chain use some Open-UDC enhancements of the section
  5.2.3. of the [RFC4880]

(TO CONTINUE... !)

8.== udc-unit ASCII format ==

9.== Security concerns ==

9.1= offline transactions =

    As it has been mentioned, offline udc-units MUST be published
    as soon as possible.

    If not, fraud detection will become harder, which mean fraud will
    become easier.

9.2= signing chain initialization =

    The initialization of the signing chain required all attention
    because it holds the crucial security part during offline
    transaction.

    All the initializers are identified by their Key ID, and their
    OpenPGP certificate should be known by everyone.

    All initialization MUST be done online and in the root node of the
    currency.
    (So with the connection flag set.)

    If an udc-units which has not been recorded by the network appears,
    which means the associated initializer has done something nasty or
    its key has been corrupted, the initialization certificate will be
    revoked, Network should investigate about the fraud, and all the
    udc-units provided by this initializer will have to be initialized
    by the other initializers.
