Network Working Group                                       J.J. Brucker
Request for Comments:                                      Open-UDC Team


      ==== OpenUDC Exchange Formats  ====

 === Abstract ===

 === Status of This Memo ===

 (Today 1st December 2011, it is still a draft).

 === Copyright Notice ===

 === Table of Contents ===

 1. Introduction ....................................................
 2. Conventions Used in This Document ...............................
 3. Validation Nodes act as HTTP Servers ..........................
 4. Tree Structure of Validation Nodes ............................
 5. Data expected in the tree structure .............................
    5.1 Formats used for parameters update
    5.2 Formats used for transactions
    5.3 MIME types (a priori deprecated)
 6. Propagation mechanism

1.== Introduction ==

  The OpenUDC project aims to provide a open, democratic and secure
  monetary system, compatible with universal dividend.

  This document describe the MIME-types used in to described the
  different datas which need are exchanged in OpenUDC implementations.

  Only the Content-Type field is used, which permit more flexible uses:
  It make it compatible with almost all multipart media type as defined
  in section 5.1 of [RFC2046].
  But

  OpenPGP standard [RFC4880].

2.== Conventions Used in This Document ==

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in [RFC2119].

3.== Validation Nodes Overview ==

  Validation Nodes, act as HTTP Servers.

  There in no restriction on the port number to reach a Validation
  Daemon, although port 11371 or 80 are recommended.

  Validation Nodes MUST manage "GET" and "POST" word as specified by
  the protocol HTTP/1.0.

  Validation Nodes SHOULD manage "HEAD" word and "Range" parameter, as
  specified by the protocol HTTP/1.1, cf. [rfc2616].

  Validation Nodes MUST manage the MIME types defined in this document
  (cf sections ..) and send them in the "Content-Type" parameter.

4.== Tree Structure of Validation Nodes

  As each Nodes act as an HTTP server, Node resources MUST be
  available trough such kind of URL :

    * http://NodeHostame[:port]/...
  or
    * https://NodeIP[:port]/...
  or
    * httpgp://NodeIP[:port]/...

  A node MUST provide determined resources at determined
  location.

  Here is an overview of such tree structure :

http[s]://Node[:port]/...
|-- pks/
|   |-- add
|   `-- lookup
|-- udc/
|   |-- update
|   `-- [currency_code]/
|       |-- keys
|       |-- synthesis
|       |-- grains/
|       |   `-- [PARAMETERS_NUM]/
|       |       `-- [VALUE]/
|       |               |-- [SERIAL_NUM].tgz
|       |               `-- [SERIAL_NUM]/
|       |                   |-- 1
|       |                   |-- ...
|       |                   `-- [GRAIN_BLOCK_NUM]
|       |-- params/
|       |   |-- synthesis
|       |   |-- 1
|       |   |-- ...
|       |   `-- [PARAMETERS_BLOCK_NUM]/
|       |       |-- [PARAMETERS_NUM].sheet
|       |       |-- [PARAMETERS_NUM].fprs
|       |       `-- [PARAMETERS_NUM]_[FPR].sig
|       `-- peer/
|           |-- self
|           |-- register
|           `-- list
`-- udid2/
    |-- geolist_FRA.txt.asc
    |-- geolist_ITA.txt.asc
    |(...)
    `-- index.html

  pks/ see draft about keyservers

  udc/update is used to POST new block into serveur. They MUST contain at least
  2 parameters:
    * ccode: currency code
    * btype: block type

5.== Data expected in the tree structure ==

  OpenUDC application use the Content-Type "multipart/msigned",
  specified in the "HTTP OpenPGP Authentication" draft, to exchange
  signed data.

5.1= parameters block =

  The "udc/update" url is used to POST parameters update with at
  least the minimum number of required signatures. Signatures MUST by
  done by different keys known in the previous parameters.

  POST data MUST have the content-type multipart/msigned, as described
  in [...](an other doc).

  After being validated by a node, the parameters update is propagated
  through other nodes, using the mechanisms described below.

  Key fingerprints, which are also account identifiers, are classified into at
  most 16 categories:
   * 0: UNKNOWN (Reserved for eventual future use)
   * 1: DELETE (Reserved for eventual future use)
   * 2: REJECTED (Reserved for eventual future use)
   * 3: BASIC (regular accounts)
   * 4: BOT (Reserved for eventual future use)
   * 5-13: (Reserved for eventual future use)
   * 14: HUMAN (will receive a part of the new currency units)
   * 15: VOTER (which may vote for next one)

   First data of a parameter block determine the format of data in the block

if [VERSION_FORMAT] == p1 then block data contain :

[HASH of previous parameters block]
[grains FACTORS]
[CATEGORIES which may initiate grain block]
[MINIMAL NUMBER OF VOTER's SIGNATURES for next parameters update]
[minimal birth time of grains's block chain]
[minimal average time (in seconds) between 2 signatures in grain block chain]
[list of FINGERPRINTS changing category]

Example:
p1
adc83b19e793491b1c6ea0fd8b46cd9f32e592fc
2 1 3 0 1 3 0 1 3 2 0 1
14 15
3
1588553132
43200
FD289C703E2E54C8BBED7CD08BAA38841BA5F17B:14
05AA4007A3428EBE6BF3B751D403380F6656CBEC:14
6089A78D77BC6C7A1A2EC7F097E9443A0AA85FA4:3
20D11AC53DAE0E19DFEEE1465D2662E0F300EBAD:15
AB49FC7C3EC6D4A2259B0508FB29CDDA17A7E2AE:14
5FDA8373344F3868D24D8ED280B1DF4F7FE6695D:15
18F938BD3BBBF9190B77EABB57A135297E9DF1BF:15

In this example 7 keys are new or have changed category.

Then all keys in categories 14 and 15 (since the beginning of the block chain) are able to initiate 17 grain block chains :
* 2 grain block chains which value are "1"
* 1 grain block chain of value "2"
* 3 grain block chains of value "4"
* 0 grain block chain of value "8"
* 1 grain block chain of value "16"
* 3 grain block chains of value "32"
* 0 grain block chain of value "64"
* 1 grain block chain of value "128"
* 3 grain block chains of value "256"
* 2 grain block chains of value "512"
* 0 grain block chain of value "1024"
* 1 grain block chain of value "2048"


5.2= Transactions =

  Each grain is also a block chain.

   First data of a grain block determine the format of data in the block

if [VERSION_FORMAT] == g1 then block data contain :

[HASH of previous grain block]
[FINGERPRINT DESTINATION]
[RESERVED SHORT SPACE FREELY USABLE]


Example:
g1
adc83b19e793491b1c6ea0fd8b46cd9f32e592fc
5FDA8373344F3868D24D8ED280B1DF4F7FE6695D
Thanks

5.3= MIME types (a priori deprecated) =

cf: [RFC2046] : http://www.bortzmeyer.org/2046.html
[RFC3156] : http://www.ietf.org/rfc/rfc3156.txt
MIME types used by OpenUDC Nodes and Clients

    text/udc-report

contain status code of the transaction, and a status string.

    application/pgp-signature ("receipt of the cheque")

contain detached signature (ASCII-armored or not) of the application/udc-t-cheque content by the receipt.

    application/udc-t-validation

contain detached signature (ASCII-armored or not), signed by a validation node of :

    the application/udc-t-cheque content

    and the status code of the transaction.

    application/pgp-signature ("vote of the creation sheet")

    application/pgp-keys

MIME types for other applications (like mail client) :

    application/udc-transaction

    application/udc-update


6.== Propagation Mechanisms ==

  This section describe how POST data which have to be spread
  immediately in the network are propagated to other nodes.

  This ensure all nodes continuously synchronize themselves to always share
  the same states.

  This concern especially "udc/update", "udc/validate" and
  "udc/peer/register" url interfaces.

  This mechanism required that each nodes know accurately the (same)
  pool of other nodes.

  The pool synchronization is also done when using "udc/peer/register"
  url interface (so almost "recursively").

  Each node MUST declare and use the same peer list. The list is
  sorted by alphabetical order of the node's OpenPGP fingerprint.

  (It may change in the futur by considering the node's network
  topology to reduce the time of propagation - TODO. )

  Propagation is done using specific parameters in the query string.

  example:
  POST "udc/update?pdeep=2&porigin=27DF2AB5CA52B6D7A5A61974009AE2968C8F5FDA


